{"version":3,"sources":["components/Header.js","components/Footer.js","components/GameArea.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","this","props","status","score","topScore","Component","Footer","year","Date","getFullYear","href","GameArea","_this","emojis","emoji","map","item","key","id","data-id","onClick","handleClick","src","image","alt","message","App","state","data","messages","componentDidMount","setState","shuffleData","sort","b","Math","random","event","target","dataset","checkGuess","resetData","Object","objectSpread","clicked","correctGuess","newData","parseInt","newScore","max","floor","length","animateCSS","element","animationName","callback","node","document","querySelector","classList","add","addEventListener","handleAnimationEnd","remove","removeEventListener","react","components_Header","components_GameArea","animate","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23127efc.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n\n  render() {\n    return (\n      <header>\n        <div className=\"container-fluid\">\n          <div className=\"row d-flex align-items-center\">\n            <div className=\"col-md-3 title\">\n              Clicky Emojis\n            </div>\n            <div className=\"col-md-6 text-center\">\n              {this.props.status}\n            </div>\n            <div className=\"col-md-3 score\">\n              Score: {this.props.score} | Top Score: {this.props.topScore}\n            </div>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass Footer extends Component {\n  render() {\n    const year = new Date().getFullYear();\n    return (\n      <footer className=\"footer mt-auto py-3\">\n        <div className=\"container-fluid text-center text-light text-muted\">\n          <div className=\"row d-flex align-items-center\">\n            <div className=\"col-md-3 text-md-left\">\n              Built with React\n            </div>\n            <div className=\"col-md-6 text-center\">\n              <span>Copyright &#169; {year} -  <a href=\"https://www.xtianares.com\">Christian Castanares</a></span>\n            </div>\n            <div className=\"col-md-3 text-md-right\">\n              <a href=\"https://github.com/xtianares/clicky-game\">View in Github</a>\n            </div>\n          </div>\n        </div>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\n\nclass GameArea extends Component {\n  render() {\n    const emojis = this.props.emoji.map((item) =>\n      <img className=\"thumb img-thumbnail\"\n        key={item.id}\n        data-id={item.id}\n        onClick={this.props.handleClick}\n        src={item.image}\n        alt={item.id}\n      />\n    );\n\n    return (\n      <main className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12 text-center\">\n            <h1 className=\"h3 mt-4 mt-md-5 mb-4 mb-md-5 message\">{this.props.message}</h1>\n          </div>\n        </div>\n        <div className=\"row d-flex justify-content-center\">\n          <div className=\"image-container col-12 d-flex justify-content-center\">\n            {emojis}\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default GameArea;\n","import React, { Component, Fragment } from 'react';\nimport './scss/App.scss';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport GameArea from './components/GameArea';\nimport data from \"./data\";\n\nclass App extends Component {\n  state = {\n    data,\n    score: 0,\n    topScore: 0,\n    status: 'Click an emoji to start',\n    message: \"Click as many emoji as you can without clicking the same one\"\n  }\n\n  messages = [\n    \"Good job keep it up!\",\n    \"Great, now keep on clicking!\",\n    \"Keep on clicking and set a new high score!\",\n    \"Nice, click like there's no tomorrow!\",\n    \"You're doing great, now click some more!\"\n  ]\n\n  componentDidMount = () => {\n    this.setState({ data: this.shuffleData(this.state.data) });\n  }\n\n  shuffleData = data => {\n    let newData = data.sort(function(a, b){return 0.5 - Math.random()});\n    return newData;\n  };\n\n  handleClick = event => {\n    const id = event.target.dataset.id;\n    this.checkGuess(id);\n  }\n\n  resetData = data => {\n    const resetData = data.map(item => ({ ...item, clicked: false }));\n    return this.shuffleData(resetData);\n  };\n\n  checkGuess = id => {\n    // if the clicked emoji hasn't been clicked set new state\n    let correctGuess = false;\n    const newData = this.state.data.map(item => {\n      // console.log(item.id);\n      if (item.id === parseInt(id)) {\n        // console.log(item.id);\n        // console.log(item.clicked);\n        // console.log(id);\n        if (!item.clicked) {\n          item.clicked = true;\n          correctGuess = true;\n        }\n      }\n      return item;\n    });\n    if (correctGuess) {\n      let newScore = this.state.score + 1;\n      this.setState(\n        {\n          data: this.shuffleData(newData),\n          score: newScore,\n          topScore: Math.max(newScore, this.state.topScore),\n          message: this.messages[Math.floor(Math.random()*this.messages.length)]\n        }\n      )\n      this.animateCSS('.message', 'pulse')\n    }\n    // if the clicked emoji has been clicked, reset game but retain highscore\n    else {\n      this.animateCSS('main', 'shake')\n      this.setState(\n        {\n          data: this.resetData(newData),\n          score: 0,\n          message: 'Oopsies, click an emoji to try again.'\n        }\n      )\n    }\n  }\n\n  animateCSS = (element, animationName, callback) => {\n    const node = document.querySelector(element)\n    node.classList.add('animated', animationName)\n    let handleAnimationEnd = () => {\n      node.classList.remove('animated', animationName)\n      node.removeEventListener('animationend', handleAnimationEnd)\n      if (typeof callback === 'function') callback()\n    }\n    node.addEventListener('animationend', handleAnimationEnd)\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Header\n          status={this.state.status}\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <GameArea\n          message={this.state.message}\n          emoji={this.state.data}\n          animate={this.animateCSS}\n          handleClick={this.handleClick}\n        />\n        <Footer />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}